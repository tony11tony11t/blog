<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Master the Coding Interview] BigO介紹</title>
    <url>/blog/2021/12/02/Master_The_Coding-BigO/</url>
    <content><![CDATA[<p><strong><font color=#FF6600>本篇為Master the Coding Interview教學影片筆記文</font></strong></p>
<h3 id="What-is-good-code"><a href="#What-is-good-code" class="headerlink" title="What is good code?"></a>What is good code?</h3><p>什麼是好的程式碼，好的程式碼是Readable和Scalable的，BigO可以拿來測量程式的執行速度，所以這章會著重在Scalable的部分。</p>
<h3 id="BigO"><a href="#BigO" class="headerlink" title="BigO"></a>BigO</h3><p>BigO為什麼會存在，因為當我們要判斷一個code好或不好的時候，如果用執行的時間來看的話，因為每個電腦CPU的不同，會有執行速度上的差異，同樣的code不同的設備會有不同的速度，所以不能以時間來做為依據，這時候我們就會用BigO來判斷code執行速度。</p>
<p>BigO主要是利用程式執行多少步驟來做計算，拿以下的程式碼來說：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printHappy</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;Happy&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printHappy(n);  <span class="comment">//O(n) --&gt;linear time</span></span><br></pre></td></tr></table></figure>

<p>假設今天n是1，那這個for迴圈就會執行1次，n=2就會執行兩次，n=100就會執行100次，以此類推，我們可以發現n跟執行的次數呈現一個正比，並且是線性的增加，透過這個方式我們可以說這個printHappy的函式時間複雜度是O(n)。</p>
<p>O(1)表示constant time，表示不管甚麼input進去，這個function都會執行一樣數量的步驟，是時間複雜部裡面最好的一種。</p>
<p><strong>BigO Challenge</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funChallenge</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;  <span class="comment">//O(1)</span></span><br><span class="line">  a = <span class="number">50</span> + <span class="number">3</span>;  <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123; <span class="comment">//O(n)</span></span><br><span class="line">    anotherFunction(); <span class="comment">//O(n)</span></span><br><span class="line">    <span class="keyword">let</span> stranger = <span class="literal">true</span>; <span class="comment">//O(n)</span></span><br><span class="line">    a++; <span class="comment">//O(n)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a; <span class="comment">//O(1)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，有些人說賦值不能算是一個步驟，但這邊先不討論這部分，所以賦值就給他O(1)，for迴圈的東西就是執行n次，接著將所有的BigO加起來，我們會得到O(3 + 4n)的時間複雜度的，接著我們就會簡化她，把常數消掉後，取最複雜的那個就好，所以這題的答案是O(n)。</p>
<p>當然我們在面試的時候，不會一行一行的算出來，我們必須一眼就看出時間複雜度為何，以下有四個遵循的規則：</p>
<ol>
<li>Worst Case<br>永遠要設定成最糟的情況，因為BigO只會看最壞情況。</li>
<li>Remove Constants<br>因為input要假設成一個很大很大的數字，所以常數對他們來說不重要。</li>
<li>Different terms for inputs<br>不同的input要用不同的代數去寫，假設function裡面有兩個迴圈一個有m個element一個n個element的話，會把結果寫成O(m + n)，因為不會知道到你m多還是n多，所以都要寫上去。</li>
</ol>
<blockquote>
<p>如果兩個迴圈都同樣有n個element，並且又是一個巢狀的話，我們就可以把結果寫成O(n^2)，這是一個不好的時間複雜度，很多面試就是要請你把O(^2)變成較好的時間複雜度。</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">//O(n)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123; <span class="comment">//O(n)</span></span><br><span class="line">    <span class="built_in">console</span>.log(i,j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Drop Non Dominants<br>丟掉不重要的部分，假設function裡面有一個時間複雜度是O(n)，一個是O(n^2)，我們會取最複雜的，也就是O(n^2)。</li>
</ol>
<p>O(n!)這是最糟糕的時間複雜度，等於說每次執行loop都要加一個element，絕對要避免。</p>
<p>到這邊已經介紹了3種時間複雜度，接著要回到Scalable這個點上，時間複雜度表示的是他的run time，但除了時間，memory也是注重的一個環節，要符合Scalable，必須考慮時間跟空間，雖然現在的memory越來越大，但她不是無限的，我們仍然要注意使用的大小。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boo</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">//O(n)</span></span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">boo(<span class="number">5</span>) <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayOfHiNTimes</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> hiArray = [];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">//O(n)</span></span><br><span class="line">    hiArray[i] = <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arrayOfHiNTimes(<span class="number">6</span>)  <span class="comment">//O(n)</span></span><br></pre></td></tr></table></figure>

<p>第一個function裡面，雖然是一個迴圈，但我們只有在for迴圈裡面宣告一個i，整個函式也只有宣告這個東西，可以說boo function的空間複雜度為O(1)。第二個就不一樣了，因為我們宣告了一個陣列，並且在陣列加入了n個elements，所以arrayOfHiNTimes function的空間複雜度為O(n)。</p>
<p>通常我們會用空間換取時間或時間換取空間，這沒有甚麼對或錯，看當下的project要怎麼做就好。</p>
]]></content>
      <categories>
        <category>Master the Coding Interview</category>
      </categories>
      <tags>
        <tag>BigO</tag>
      </tags>
  </entry>
  <entry>
    <title>[Master the Coding Interview] 取得面試機會</title>
    <url>/blog/2021/11/30/Master_The_Coding-interview/</url>
    <content><![CDATA[<p><strong><font color=#FF6600>本篇為Master the Coding Interview教學影片筆記文</font></strong></p>
<h3 id="1-Resume"><a href="#1-Resume" class="headerlink" title="1. Resume"></a>1. Resume</h3><p>履歷是公司看你的第一印象，他們通常不會很仔細的去看，畢竟有太多太多的應徵者，所以我們不應該花太多時間在著磨履歷上的小地方、字型、顏色等。履歷最好花一天就要搞定，避免浪費時間。</p>
<p>不過以上是專屬於工程師，如果你是一個設計師或其他職業就要依照職業的特性來製作出符合的履歷，以下是履歷需要著重的四個部分：</p>
<ol>
<li>One page<br>一頁就好，公司不會一次想要看那麼多</li>
<li>Relavant Skills<br>相關的技能一定要寫上去，讓公司一目就可以了然你會什麼</li>
<li>Personalized<br>要依照每個公司稍微對履歷做一些變動，可能改改簡介內容或大標題等</li>
<li>Online Link<br>要讓履歷可以連上你的github</li>
</ol>
<p>可以透過以下的條件檢視一下自己的履歷：</p>
<ul>
<li>使用一個已經設計好的模板</li>
<li>控制履歷的內容在一頁之內</li>
<li>要包含你對工作的描述</li>
<li>要加入你要應徵的公司名稱</li>
<li>要讓履歷中每個大項目中的第一個小項目是最吸引人的部分  <blockquote>
<p>例如我們寫到專業技能，如果你是要應徵工程師，第一項專業技能一定要是那方面的東西，並且依照應徵工作的性質來排序</p>
</blockquote>
</li>
<li>在該強調的地方做強調<blockquote>
<p>例如我們寫到工作經驗，要強調的是工作的職位和工作的內容，而不是公司的名稱</p>
</blockquote>
</li>
<li>記得附上連結，不管是Github或是blog的都可以</li>
<li>不要用「我」<blockquote>
<p>用第一人稱寫履歷會有很多冗詞贅字，應該改為用第三人稱</p>
</blockquote>
</li>
<li>不要加入一些流行用詞</li>
<li>利用動詞來描述事情會更讓人加深印象</li>
<li>確定每件事都講得很具體，不要有很模糊的描述</li>
<li>在描述你的技能程度時，可以用具體的事跡說明</li>
<li>每個項目中的內容都只要放符合應徵職位的就好</li>
<li>沒有任何的錯字和吻法錯誤</li>
</ul>
<p>檢視完自己的履歷後，還是要再次強調履歷只能讓你有機會面試，不能讓你得到工作，更重要的還是面試的技巧跟作品集，所以不要花太多時間在設計履歷，更重要的是，要對自己的履歷百分之百的誠實，避免面試的時候對於自己的問題答不出來。</p>
<p>接下來要講講如果是新鮮人，沒辦法有過多的工作經驗、作品等東西做出好看的履歷的話，可以利用以下四種方式來增加自己的履歷深度：</p>
<ol>
<li>GitHub<br> 如果這個帳號很活躍，代表說他可以和其他人一同工作也會做版本控制，自己沒有專案沒關係，可以拿別人的過來建置，都是公司很樂見的部分。</li>
<li>Website<br> 做一個自己的個人網頁，不一定要自己寫一個，可以套用網路上的模板來展示自己，這邊跟履歷一樣，不用過多華麗的特效，簡單能夠展示自己的作品即可。</li>
<li>1~2個大型專案<br> 少數的大型專案比起多個小專案來的更有價值，面試的時候你不能展示所有的小專案，只花1~2天做完的東西基本上都太簡單了，不會讓人印象深刻，與其花時間在小專案，不如做出一個需要一段時程才能完成的大型專案。而且通常面試官都會問你做過最難的專案為何，做過大型專案才能讓自己講出的東西較為深刻。<br/>如果沒有相關的工作經驗，在履歷上放入作品也是另外一種選擇，但要注意的是必須強調出作品的相關技能讓面試官能夠一目了然在此作品中你所學習到的東西。</li>
<li>部落格<br> 經營部落格，把自己學到的技術寫成文章也是加強自身價值的方法，在面試的時候展現能夠讓面試官印象深刻。</li>
</ol>
<p>透過以上四種加強履歷的方法，儘管沒有工作經驗也可以讓履歷不會空空如也，但要注意的是，如果你只有學程式可能半年，千萬不要寫上去，面試官在篩選人的時候如果看到絕對先丟掉，畢竟這種人的風險很高，展現好的一面，這是面試的不二法則。</p>
<h3 id="2-Linkedln"><a href="#2-Linkedln" class="headerlink" title="2. Linkedln"></a>2. Linkedln</h3><p>這是一個全世界的求職平台，此平台也是許多公司找人才的地方，很多人會覺得Linkedln上面的資料比履歷更重要，只要profile有內容就容易有公司找你，下面有幾個小心機重點可以讓公司找人才的時候更容易找到你。</p>
<ol>
<li>update your profile<br>不一定要真的更新，只要時常的去編輯再更新，就會讓自己的履歷一直處在新的狀態，也會讓公司知道自己最近在找工作。</li>
<li>keywords<br>在履歷上多寫一些關鍵字，例如你曾經用過Firebase，就把他寫上去，如果有公司是想找會用Firebase的人的話你就會出現在他的搜尋結果裡。</li>
<li>Recommendations<br>雖然這個在面試時沒有人會看，但多一點的評論也會讓自己的rank提高，容易出現在搜尋結果的上面。</li>
<li>create connect<br>利用公司來找到linkedln上面正在你想要的公司上班的人，並與他們製造關係或私訊他們。</li>
</ol>
<h3 id="3-Portfolio"><a href="#3-Portfolio" class="headerlink" title="3. Portfolio"></a>3. Portfolio</h3><p>和履歷一樣，只要有一個地方可以放上作品以便面試的時候可以展示就好，不需要利用太多時間來設計版面和網頁，但就是一定要有這項東西可以展示。</p>
<h3 id="4-Email"><a href="#4-Email" class="headerlink" title="4. Email"></a>4. Email</h3><p>公司其實最常會應徵透過朋友介紹的人，如果我們沒有親朋好友在你要面試的公司裡，那Email相對就很重要了，求職雖然可以透過求職網，但如果透過寄信的方式，也可以提高人資看到應徵者訊息的機會，也能增加獲得面試的機會。除了直接寄信詢問職缺外，更好的是與他人建立連結，利用linkedln或是其他東西來取得CEO或HR的Eemail，可以嘗試跟他們約出來聊天，約成功的同時你也算成功拿到面試了。</p>
<p>總結一下，以上四點是找工作必須要有的四樣東西，那甚麼時候該找工作呢，now，開始找工作你才能知道自己哪裡不足，哪裡需要加強，但這個答案只適用於已經有基本知識的人，如果是個新手工程師，那還是快點準備履歷，快點開始動手寫程式，做大型的project，讓自己更熟練這項技能。</p>
<p>在找工作的時候當然上面會寫很多必要條件、工作資歷等，千萬不要因此打退堂鼓，上面寫的只是他們公司會用到的技能，也可能是未來你需要學的技能，絕對不是「現在」你就已經要會的技能，唯有拿到面試機會面對面開始才是真的。雖然找工作是一個數量遊戲，投越多家越有取得面試的機會，但與其把履歷灑到求職網上，不如找出大約10家自己喜歡的公司，針對他們個別去做準備，只要做好準備，機會也不一定會比海投來得更小。</p>
]]></content>
      <categories>
        <category>Master the Coding Interview</category>
      </categories>
      <tags>
        <tag>interview</tag>
        <tag>resume</tag>
      </tags>
  </entry>
  <entry>
    <title>[Master the Coding Interview] 解決問題</title>
    <url>/blog/2021/12/06/Master_The_Coding-slove_coding/</url>
    <content><![CDATA[<p><strong><font color=#FF6600>本篇為Master the Coding Interview教學影片筆記文</font></strong></p>
<p>在面試的時候解決問題的方法是面試的關鍵，他們可能沒有想要你直接說明正確答案，他們更想看的是過程，你怎麼分析code，怎麼把你的思路跟其他人說，這也是為什麼我們必須將這些知識了解透徹，就像BigO一樣，當你今天在解題的時候一併把BigO考慮進去，這會讓自己很加分，公司要的不是天才，而是可以跟他們一起解決問題的人，只要有解決問題的能力，你就是一個對公司有價值的人。</p>
<p>我們在面試的時候，需要注意以下的四點：</p>
<ol>
<li>Ayalytic Skills-是否可以分析和解決問題</li>
<li>Coding Skills-是否可以寫出好的、易讀的、簡單的code</li>
<li>Technical Skills-是否了解對於應徵職業的基本知識</li>
<li>Comminication Skills-你的個人特質是否符合公司文化 </li>
</ol>
<p>我們可以透過以下步驟來解決面試中的白板題：</p>
<ol>
<li>將所有重要資訊寫在題目最上面，確定知道所有細節並表現出如何組織她們。</li>
<li>再次確認input和output。</li>
<li>找出問題最重要的部分，確認一下有time、memory的限制嗎，最終目標是甚麼?</li>
<li>不要問太多很小很瑣碎的問題，面試是有時間的，只要知道了前三點要的東西後就可以開始coding了。</li>
<li> 先用最爛最直覺的解，不用把它寫出來，可以直接用說的，這表示你可以很快的想到怎麼解決問題。</li>
<li>告訴面試官為什麼這個解不是最好的，可以從時間複雜度的部分告訴她。</li>
<li>想想是不是有更好的方式，檢視一下是否所有資訊都有考慮進去了。</li>
<li>在開始寫程式之前，先把等等要做的步驟寫下來。</li>
<li>在一開始就模組化你要寫下來的程式碼，把問題區分成小塊的部分並且在適當的地方解釋一下。</li>
<li>正式的開始寫code，要記住知道的訊息越多，在開始寫白板題的時候越不容易出錯，千萬不要在開始寫的時候還甚麼都不清楚。記住一件事，很多人在白板題都沒辦法準時的將最好的答案寫出來，所以要怎麼讓自己表現更好，一步一步的破解，就算最後沒有解出來，也至少有留下了你所知道的部分給面試官看。</li>
<li>想想有甚麼案例放進去會錯誤，要假設所有人都想破壞你的code，該怎麼做才能預防所有bad inputs。小技巧就是評論自己的code，並且告訴面試官你如何修正自己的code，用討論的方式讓他知道你會注意這些細節。</li>
<li>不要用一些奇怪的名稱來命名你的變數或函式，讓可讀性也加入你的想法裡。這也可以跟你的面試官講，讓他知道你會注意這個部分。</li>
<li>測試你的code，如果沒有帶入參數或帶入0、null、undefined等等奇怪的值的時候應該要怎麼做，跟11點類似的概念，也是要讓面試官知道你的想法是最重要的。</li>
<li>告訴面試官還可以怎麼在改進code，還有其他種方式來解決問題嗎，這是可讀性高的code嗎，有其他特定語法可以來改寫code嗎?小技巧：可以問問面試官看過最有想法的解法是什麼。</li>
<li>如果面試官很喜歡這個解答，他通常會結束白板題，又或者是問延伸的問題，例如如果記憶體沒那麼大該怎麼辦等，這是Google很常面試的問題，最簡單的回答就是分而治之，divide-and-conquer，把input拆開輸入，最後output再合併。</li>
</ol>
]]></content>
      <categories>
        <category>Master the Coding Interview</category>
      </categories>
      <tags>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>[Complete React Developer in 2022]React介紹</title>
    <url>/blog/2021/11/30/React-Tutorial-01/</url>
    <content><![CDATA[<p><strong><font color=#FF6600>本篇為Complete React Developer in 2022教學影片筆記文</font></strong></p>
<p>傳統的網頁呈現方式，是將所有的HTML、CSS、JS的檔案上傳到server，等到使用者要讀取網頁的時候再從server呼叫出來顯示在瀏覽器上，每一次有一個新的頁面時就會再重複一次從server讀取檔案的這個步驟，這是一套行之有年的網頁模式。但漸漸的問題來了，越來越多種瀏覽器問世，每種瀏覽器又有不同的編譯方式，導致開發者需要開發許多種網頁來因應每種瀏覽器，讓網頁開發增加了許多難度。</p>
<p>接著，jQuery問世了，他整合了所有瀏覽器的問題，做出了非常簡單的API工具，透過jQuery可以快速的讓使用者與網頁互動，並且大大縮短開發速度。但人的慾望沒有極限，工程師開始會想要開發更大的專案，功能開始變的複雜，像是Facebook，有帳戶、可以線上即時聊天、寄信等，不再只是像blog一樣發發文章做做新的頁面了。</p>
<p>當jQuery沒辦法再應付大型專案的時候，backbone.js出來了，SPA(single page application)的概念也跟著出來，網頁不再只是每次要新的就去server load，而是變成放大js的功能，縮小html的地位，利用js來改變當前html的內容，達到SPA的一個概念，這也是為什麼網頁不再只是一個頁面而是稱為應用程式了。</p>
<p>2010年，由Google創造的Angular.js出現，不同於jQuery，有了MVC的概念，把每一塊程式碼都變成一個包裹的概念，讓其不會互相干擾，讓工程師之間更容易合作。但很快就有一個問題出現了，網頁上的每個部份都會互相影響，迎來的是資料越來越散落在各個包裹裡，讓Debug越來越難。</p>
<p>2013年，Facebook是出了第一版的React，解決了資料流的問題，讓資料不會散落在各地，也是因為如此，2014年的時候Angular.js意識到自己沒辦法再創造出好的SPA後，他們直接重寫了library，並改名為Angular，的確就是把js拿掉，但也因為這個重寫，很多開發者直接轉向投入React，也讓現今一堆大公司都使用了React來作為主要框架。</p>
<p>以下是react的幾個原則：</p>
<ol>
<li>Don’t touch the DOM. I’ll do it.<br>只要給React資料，就可以利用他幫忙套入資料，不需要更改DOM來達到更換頁面呈現的資料。</li>
<li>Build websites like lego blocks<br>React的一大特性就是components，模組化跟樂高一樣，一個網頁就像是很多樂高很多組件拼湊而成的，開發的components還可以到處重複利用，十分彈性。</li>
<li>Unidirectional data flow<br>react的資料流向，有一個限制就是只能往下不能往上，資料只能單向溝通，這讓開發者可以更清楚知道資料在app裡面的流向，更容易去處理bug。</li>
<li>UI, The rest is up to you<br>React專注於ocmponenet的產生，只要有這個React的藍圖，我們就可以在任何地方建置他，手機、電腦、terminal等等都可以，這就是React跨平台的應用，當然，如果是一般的網頁，我們就要用到React何React-DOM</li>
</ol>
<p>如果要成為一個成熟的React工程師，要記得以下三點開發的原則</p>
<ol>
<li>Decide on Components</li>
<li>Decide the State and where it lives</li>
<li>What changes when state changes</li>
</ol>
]]></content>
      <categories>
        <category>Complete React Developer in 2022</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[Complete React Developer in 2022]React基本概念</title>
    <url>/blog/2021/12/06/React-Tutorial-02/</url>
    <content><![CDATA[<p><strong><font color=#FF6600>本篇為Complete React Developer in 2022教學影片筆記文</font></strong></p>
<h2 id="NPM-vs-YARM"><a href="#NPM-vs-YARM" class="headerlink" title="NPM vs YARM"></a>NPM vs YARM</h2><p>npm是node package manage，可以利用這個指令在terminal做很多事情，yarm跟npm一樣，只是yarn是facebook開發的，以下是他們的指令對照：</p>
<table>
<thead>
<tr>
<th>Install dependencies from package.json</th>
<th>yarn</th>
<th>npm install</th>
</tr>
</thead>
<tbody><tr>
<td>Install a package and add to package.json</td>
<td>yarn add package</td>
<td>npm install package  –save</td>
</tr>
<tr>
<td>Install a devDependency to package.json</td>
<td>yarn add package –dev</td>
<td>npm install package –save-dev</td>
</tr>
<tr>
<td>Remove a dependency from package.json</td>
<td>yarn remove package</td>
<td>npm uninstall package –save</td>
</tr>
<tr>
<td>Upgrade a package to its latest version</td>
<td>yarn upgrade</td>
<td>npm update –save</td>
</tr>
<tr>
<td>Install a package globally</td>
<td>yarn global add package</td>
<td>npm install package -g</td>
</tr>
</tbody></table>
<h2 id="NPX"><a href="#NPX" class="headerlink" title="NPX"></a>NPX</h2><p>npx是建立在npm下面的指令，假設我們在terminal下了下面這段指令：</p>
<blockquote>
<p>npm install -g cowsay</p>
</blockquote>
<p>表示我利用npm安裝cowsay這個package，-g表示global，安裝在全局，就是整個電腦的環境裡面。如果沒有寫-g表示安裝在當下資料夾裡面。</p>
<p>如果要解安裝只要在install前加上un即可。那甚麼是npx呢，簡單的理解就是說npx幫你先把package下載下來並且執行，一執行完馬上解安裝，讓你的電腦不會存在這個package以便節省記憶體。npx的寫法只要在後面加上package name和帶入的參數即可。</p>
<blockquote>
<p>npx cowsay hiiiiiii~~~</p>
</blockquote>
<h2 id="Create-React-App"><a href="#Create-React-App" class="headerlink" title="Create React App"></a>Create React App</h2><p>這是facebook開發的package，用於快速打造react專案，以下介紹幾個地方表示的意義：</p>
<table>
<thead>
<tr>
<th>package.json</th>
<th>專案的所有設定都包含在這裡，包含版本、用的套件、腳本等。</th>
</tr>
</thead>
<tbody><tr>
<td>package.json → dependencies</td>
<td>裡面是所有用到的套件以及版本</td>
</tr>
<tr>
<td>package.json → dependencies→ react</td>
<td>最重要的部分，react的核心庫</td>
</tr>
<tr>
<td>package.json → dependencies→ react-dom</td>
<td>react是一個跨平台的框架，他可以利用react-native來建造手機app，又或者接上VR打造VR的應用程式等。在這邊因為是要開發網頁，所以要引入此package來控制網頁上的DOM。</td>
</tr>
<tr>
<td>package.json → dependencies→ react-script</td>
<td>給CLI用的腳本，透過在scripts裡面設定的指令可以讓CLI讀懂輸入的指令，例如start、build等</td>
</tr>
</tbody></table>
<p>接著打開index.js可以發現程式的進入點，利用render function來渲染畫面，React.StrictMode主要是確認我們沒有用到版本遺棄的指令，讓程式處在一個安全的狀態。這邊有寫到在root這個節點裡面渲染，這個節點的位置在index.html裡面，這個檔案就是我們主要載入的html，react也只會載入這個html並置換裡面內容達到SPA的效果。</p>
<table>
<thead>
<tr>
<th>start</th>
<th>開啟server進行網頁預覽</th>
</tr>
</thead>
<tbody><tr>
<td>build</td>
<td>將整個react專案打包，資料夾內會產生一個build資料夾，裡面只會有html、css和js，主要是給瀏覽器看的資料，通常我們也只會把build好的檔案丟到server上。</td>
</tr>
<tr>
<td>test</td>
<td>執行測試專案</td>
</tr>
<tr>
<td>eject</td>
<td>自訂webpack or babel的設定，當我們執行此指令後，會出現很多設定的檔案，這些設定主要用於build階段，但在此專案創建的時候，create react app這個指令其實都幫我們做了最優化的設定，所以沒事不需要更改。</td>
</tr>
</tbody></table>
<h2 id="componenets"><a href="#componenets" class="headerlink" title="componenets"></a>componenets</h2><p>一段程式碼用來顯示視覺化的UI，UI包含HTML、CSS、javaScript。透過ReactDOM，我們可以把component當作HTML tag來使用。一般來說建立component有兩種方式，class和hooks，hooks，一般我們都會用class來建立，因為很多程式語言都有物件導向的觀念，所以這邊先介紹class版的components</p>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//建構子，主要是設定state初始值的地方</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//繼承Component，主要用於呼叫Component的建構子</span></span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//設定state</span></span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">string</span> : <span class="string">&quot;Hello Tony&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.state.string &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">					&#123;/*在onclick裡面加上setState的方法，讓按鈕可以更改string字串*/&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.setState(&#123;string: &#x27;Hello Tang Jia Jun&#x27;&#125;)&#125;&gt;Change Text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這是將範例改成class的形式，按下按鈕可以更改文字內容，這邊的重點是state，react的核心，透過setState可以改變資料內容，利用這個特性可以達成網頁的互動效果。那renden裡面的html內容又是甚麼呢？他是jsx，和html很像，是react用來編譯成html的一種形式，當我們的畫面有變動的時候，也就是setState讓state有更動的時候，就會觸發render的執行，把更改的html送回UI上。</p>
<p>setState是一個非同步的指令，表示這個指令並不會立即的執行，所以他的第二個參數是callback function，當setState成功後會執行的function，可以利用這個部分來測試setState是否成功。</p>
<h3 id="Asynchronous-setState"><a href="#Asynchronous-setState" class="headerlink" title="Asynchronous setState"></a>Asynchronous setState</h3><p>當我們在使用setState的時候，因為他是非同步行為，不會即時更改，所以當我們要做類似計數器的功能的時候，要避免以下的寫法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>:<span class="built_in">this</span>.state.count + <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>上面的程式碼看似沒問題，但因為react會等到適當的時機才執行這段程式碼，我們不能保證每次取到的count值都已經被+1了，有可能兩次的setState都取得同樣的count值，要解決以上問題，就必須在setState裡面帶入函式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(<span class="function">(<span class="params">prevState, prevProps</span>) =&gt;</span> &#123;</span><br><span class="line">	retrun &#123;<span class="attr">count</span> : prevState.count + <span class="number">1</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>這邊就先停住，更多的資訊可以看這篇 <a href="https://medium.com/javascript-scene/setstate-gate-abc10a9b2d82">https://medium.com/javascript-scene/setstate-gate-abc10a9b2d82</a>，之後會再整理一篇文章說明這個問題。</p>
<h3 id="Key-attribute"><a href="#Key-attribute" class="headerlink" title="Key attribute"></a>Key attribute</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.state.monsters.map(<span class="function"><span class="params">monster</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">key</span>=<span class="string">&#123;monster.id&#125;</span>&gt;</span>&#123;monster.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br></pre></td></tr></table></figure>

<p>當我們要使用map() function把陣列裡的資訊列出來的時候，react會叫我們把所有的tag都加上key，因為react自動幫我們篩選那些tag有更動那些沒有，透過key找出有更動的tag並且只更新那些部分，避免每一次的小更動卻要重新把所有東西都render一次。</p>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line">&lt;CardList name = <span class="string">&quot;Tony&quot;</span>&gt;Happy&lt;/CardList&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//card-list.component.jsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CardList = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;card-list&#x27;</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>react的第二個核心觀念，當一個components創建時，他會有一個屬性props紀錄傳進來的參數，像上面的例子，傳入name屬性，並且在tag裡面夾入字串，當我們在使用components的時候，props就會把上面兩個屬性記錄下來，tag裡面的東西可以利用props.children來取得，tag上的屬性用key取得即可。</p>
<p>總結state只會活在一個component裡面，他可以往下面的ocmponents傳，但是下面的components是利用props來接收，並且只能向下傳送不能向上。</p>
<h3 id="When-do-we-break-things-down-into-components"><a href="#When-do-we-break-things-down-into-components" class="headerlink" title="When do we break things down into components?"></a>When do we break things down into components?</h3><p>當一個元件可以被重複用很多次獲用在很多地方的時候，就需要獨立成一個components。</p>
<h3 id="function-VS-class"><a href="#function-VS-class" class="headerlink" title="function VS class"></a>function VS class</h3><p>要如何決定component要用function還是class，可以先思考他要不要有state，如果他只是一個不需要互動的component，那可以利用function的方式來建造，比較易讀也比較簡單，反之如果component比較複雜且互動性比較高的話，就可以先使用class來建造。</p>
<blockquote>
<p>延伸：要如何知道state放在哪一個component，可以將所有component的關聯圖建立起來，如果component的state只會影響到自己children的UI，那state可以放在自身身上，如果會影響到parent or sibling，就要往上層放，直到state可以涵蓋所有被影響的component才能停止向上。</p>
</blockquote>
<h3 id="“this”-in-class"><a href="#“this”-in-class" class="headerlink" title="“this” in class"></a>“this” in class</h3><p>當我們在寫component裡面要使用state的時候，我們會寫成this.state，這個this指的是component這個class，又因為這個class繼承React裡面的component class，所以今天我們在呼叫像是constructor或render的時候，可以使用this.state來找到這個變數。如果今天是在class裡面自訂一個方法並且在裡面使用this的話，因為React.Component沒有自動綁定this，所以自訂的函式會視this為undefined，以下有兩種方法改善：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自己綁定</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.foo = <span class="built_in">this</span>.foo.bind(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用arrow function的特性</span></span><br><span class="line"><span class="comment">//this的指向會依照語彙範疇來設定</span></span><br><span class="line"><span class="comment">//因為函式在class裡面宣告所以會指向此class</span></span><br><span class="line">foo = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.setState(&#123;<span class="attr">searchField</span>:e.target.value&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="原始的React"><a href="#原始的React" class="headerlink" title="原始的React"></a>原始的React</h3><p>creat react app這個package幫我們建立了很棒的開發環境，但如果把jsx和babel抽掉只留下react的話，就會像以下範例一樣用呼叫API的方式來撰寫。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">//利用createElement來建立react dom的物件，第一個參數是HTML tag，第二個是attributes，第三個是children的內容</span></span><br><span class="line">	<span class="comment">//這邊的children就是再塞了一個h1 tag</span></span><br><span class="line">	<span class="keyword">return</span> React.createElement(</span><br><span class="line">		<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">		&#123;&#125;,</span><br><span class="line">		React.createElement(<span class="string">&#x27;h1&#x27;</span> , &#123;&#125; , <span class="string">&quot;React IS RENDERED!!!&quot;</span>)</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//這個方式也可以寫成模組化，如果有多個children就用array表示</span></span><br><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> React.createElement(<span class="string">&#x27;div&#x27;</span> , &#123;&#125; , [</span><br><span class="line">		React.createElement(<span class="string">&#x27;h1&#x27;</span> , &#123;&#125; , props,name)</span><br><span class="line">		React.createElement(<span class="string">&#x27;p&#x27;</span> , &#123;&#125; , props,occupation)</span><br><span class="line">	])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一個參數除了寫Html tag外還可以寫react component</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> React.createElement(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,[</span><br><span class="line">		React.createElement(Person , &#123;<span class="attr">name</span>:<span class="string">&quot;tony&quot;</span> , <span class="attr">occupation</span>:<span class="string">&quot;developer&quot;</span>&#125;)</span><br><span class="line">		React.createElement(Person , &#123;<span class="attr">name</span>:<span class="string">&quot;tang&quot;</span> , <span class="attr">occupation</span>:<span class="string">&quot;cooker&quot;</span>&#125;)</span><br><span class="line">	])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="View-→-Actions-→-State-→View→…"><a href="#View-→-Actions-→-State-→View→…" class="headerlink" title="View → Actions → State(→View→…)"></a>View → Actions → State(→View→…)</h3><p>在React中，DOM總共有兩種，virtulDOM和actualDOM，網頁上顯示的是actualDOM，當使用者與網頁做出互動，改變state的時候，virtulDOM會與actualDOM做比對，看是哪個DOM被更改，並且給render更改後的component。資料的流向是單向的，Debug的時候就可以知道是哪個環節出問題，如果UI有問題就可以找State，如果互動有問題就要檢查View等等。</p>
<h3 id="Lifecycle-methods"><a href="#Lifecycle-methods" class="headerlink" title="Lifecycle methods"></a>Lifecycle methods</h3><p><img src="/blog/2021/12/06/React-Tutorial-02/lifeCycle.png" alt="Untitled"></p>
]]></content>
      <categories>
        <category>Complete React Developer in 2022</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[Master the Coding Interview]陣列</title>
    <url>/blog/2021/12/07/Master_the_Coding-DS-Array/</url>
    <content><![CDATA[<p><strong><font color=#FF6600>本篇為Master the Coding Interview教學影片筆記文</font></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> strings = [<span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">string[<span class="number">2</span>] <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//push</span></span><br><span class="line">strings.push(<span class="string">&#x27;e&#x27;</span>); <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pop</span></span><br><span class="line">strings.pop(); <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unshift</span></span><br><span class="line">strings.unshift(<span class="string">&#x27;x&#x27;</span>); <span class="comment">//O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice</span></span><br><span class="line">strings.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&#x27;alien&#x27;</span>) <span class="comment">//O(n)</span></span><br></pre></td></tr></table></figure>

<p>在javaScript的世界裡，array並不是一個固定的資料結構，他本身算是dynamic array，會自動的伸縮長度，所以我們不用擔心記憶體分配不足的問題，但在較低階的語言，例如C、C++，這種在宣告階段就要將陣列記憶體配置好，當我們要使用的範圍超出記憶體配置的時候，會進行擴增，通常會是增加2倍，例如原本有8個位置就新增到16個等等。所以當這種語言在進行陣列的append的時候，會先把原陣列複製到另外一塊記憶體並且擴充，時間複雜度會是O(n)，但javaScript裡面就只有單純的append，時間複雜度是O(n)。</p>
<h2 id="Implementing-an-array"><a href="#Implementing-an-array" class="headerlink" title="Implementing an array"></a>Implementing an array</h2><p>JavaScript的Array其實是一種Object，所以我們要利用class的方式來自創一個array</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">this</span>.data = &#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">get</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.data[index]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">push</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.data[<span class="built_in">this</span>.length] = item;</span><br><span class="line">		<span class="built_in">this</span>.length++;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> lastItem = <span class="built_in">this</span>.data[<span class="built_in">this</span>.length - <span class="number">1</span>]</span><br><span class="line">		<span class="keyword">delete</span> <span class="built_in">this</span>.data[<span class="built_in">this</span>.length - <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">this</span>.length--;</span><br><span class="line">		<span class="keyword">return</span> lastItem;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="title">delete</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> item = <span class="built_in">this</span>.data[index];</span><br><span class="line">		<span class="built_in">this</span>.shiftItems(index)</span><br><span class="line">		<span class="keyword">return</span> item</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">shiftItem</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> i = index ; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">			<span class="built_in">this</span>.data[i] = <span class="built_in">this</span>.data[i + <span class="number">1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">delete</span> <span class="built_in">this</span>.data[<span class="built_in">this</span>.length - <span class="number">1</span>]</span><br><span class="line">		<span class="built_in">this</span>.length--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArray = <span class="keyword">new</span> MyArray()</span><br></pre></td></tr></table></figure>

<h2 id="Exercise：Reverse-a-string"><a href="#Exercise：Reverse-a-string" class="headerlink" title="Exercise：Reverse a string"></a>Exercise：Reverse a string</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//my answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse1</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> str.split(<span class="string">&quot;&quot;</span>).map(<span class="function">(<span class="params">_ , i</span>) =&gt;</span> str[str.length - i - <span class="number">1</span>]).join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//video answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse2</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//check input</span></span><br><span class="line">	<span class="keyword">if</span>(!str || str.length &lt; <span class="number">2</span> || <span class="keyword">typeof</span> str !== <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> backwards = [];</span><br><span class="line">	<span class="keyword">const</span> totalItems = str.length - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i = totalItems ; i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">		backwards.push(str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> backwards.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//video better answer</span></span><br><span class="line"><span class="keyword">const</span> reverse3 = <span class="function"><span class="params">str</span> =&gt;</span> [...str].reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Exercise：Merge-Sorted-Array"><a href="#Exercise：Merge-Sorted-Array" class="headerlink" title="Exercise：Merge Sorted Array"></a>Exercise：Merge Sorted Array</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//my answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortedArrays1</span>(<span class="params">arr1,arr2</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> ans = [];</span><br><span class="line">	<span class="keyword">let</span> arr1Index = <span class="number">0</span> , arr2Index = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span>(arr1Index &lt; arr1.length || arr2Index &lt; arr2.length)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr1Index &gt;= arr1.length) ans.push(arr2[arr2Index++])</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(arr2Index &gt;= arr2.length) ans.push(arr1[arr1Index++])</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr1[arr1Index] &gt; arr2[arr2Index]) ans.push(arr2[arr2Index++])</span><br><span class="line">				<span class="keyword">else</span> ans.push(arr1[arr1Index++])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//video answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortedArrays2</span>(<span class="params">arr1,arr2</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">const</span> mergedArray = [];</span><br><span class="line">	<span class="keyword">let</span> array1Item = array1[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">let</span> array2Item = array2[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">let</span> i = <span class="number">1</span> , j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Check unput</span></span><br><span class="line">	<span class="keyword">if</span>(arr1.length == <span class="number">0</span>) <span class="keyword">return</span> array2;</span><br><span class="line">	<span class="keyword">if</span>(arr2.length == <span class="number">0</span>) <span class="keyword">return</span> array1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(array1Item || array2Item)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!array2Item || array1Item &lt; array2Item)&#123;</span><br><span class="line">			mergedArray.push(array1Item);</span><br><span class="line">			array1Item = array1[i]</span><br><span class="line">			i++</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			mergedArray.push(array2Item);</span><br><span class="line">			array2Item = array2[j]</span><br><span class="line">			j++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> mergedArray;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="When-can-use-arry"><a href="#When-can-use-arry" class="headerlink" title="When can use arry?"></a>When can use arry?</h2><table>
<thead>
<tr>
<th>優點</th>
<th>缺點</th>
</tr>
</thead>
<tbody><tr>
<td>Fast lookups</td>
<td>slow inderts</td>
</tr>
<tr>
<td>Fast push/pop</td>
<td>slow delete</td>
</tr>
<tr>
<td>ordered</td>
<td>Fixed size(static array)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Master the Coding Interview</category>
      </categories>
      <tags>
        <tag>Data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[Master the Coding Interview]資料結構介紹</title>
    <url>/blog/2021/12/07/Master_the_Coding-DSIntro/</url>
    <content><![CDATA[<p><strong><font color=#FF6600>本篇為Master the Coding Interview教學影片筆記文</font></strong></p>
<p>Data Structure就是電腦儲存資料的結構與方式，有非常非常多種資料結構，區塊鏈也是一種資料結構，但我們只需要知道幾種重要的就好，這邊需要了解的重點就是How to Build One和How to Use it。</p>
<h2 id="How-Computers-Store-Data"><a href="#How-Computers-Store-Data" class="headerlink" title="How Computers Store Data?"></a>How Computers Store Data?</h2><p>電腦儲存資料的方式有兩種，RAM和storage，如果需要快速的暫存資料，資料就會存在RAM裡面，當我們把電腦關掉的時候資料也一併會被清除，反之，當我們是需要電腦關機後資料還存在的話就需要把它存入storage，但讀取的速度就會較慢。當我們要向RAM取得資料時，CPU會告訴RAM controller他要的address，RAM controller就可以快速的幫CPU找到資料，不需要從第一個位置開始尋找。CPU本身也有一個非常小的Cache會把最近取得的資料記錄起來減少資料傳輸。</p>
<p>RAM的資料結構會像下面表格一樣：</p>
<table>
<thead>
<tr>
<th>address</th>
<th>data</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>00000000</td>
</tr>
<tr>
<td>1</td>
<td>00000000</td>
</tr>
<tr>
<td>2</td>
<td>00000000</td>
</tr>
<tr>
<td>3</td>
<td>00000111</td>
</tr>
</tbody></table>
<p>假設我們今天宣告一個var a = 7，那記憶體就會用上面的方式幫我們存入，因為javaScript沒有integer，只有64bit的float，所以每一次存一個變數就是會占用八個位置。</p>
<p>有興趣可以看這篇：<a href="https://medium.com/@sarafecadu/64-bit-floating-point-a-javascript-story-fa6aad266665">64-bit floating point: a JavaScript story</a></p>
]]></content>
      <categories>
        <category>Master the Coding Interview</category>
      </categories>
      <tags>
        <tag>Data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[Master the Coding Interview]陣列</title>
    <url>/blog/2021/12/07/Master_the_Coding-DS-Array/Master_the_Coding-DS-Array/</url>
    <content><![CDATA[<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> strings = [<span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">string[<span class="number">2</span>] <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//push</span></span><br><span class="line">strings.push(<span class="string">&#x27;e&#x27;</span>); <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pop</span></span><br><span class="line">strings.pop(); <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unshift</span></span><br><span class="line">strings.unshift(<span class="string">&#x27;x&#x27;</span>); <span class="comment">//O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//splice</span></span><br><span class="line">strings.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&#x27;alien&#x27;</span>) <span class="comment">//O(n)</span></span><br></pre></td></tr></table></figure>

<p>在javaScript的世界裡，array並不是一個固定的資料結構，他本身算是dynamic array，會自動的伸縮長度，所以我們不用擔心記憶體分配不足的問題，但在較低階的語言，例如C、C++，這種在宣告階段就要將陣列記憶體配置好，當我們要使用的範圍超出記憶體配置的時候，會進行擴增，通常會是增加2倍，例如原本有8個位置就新增到16個等等。所以當這種語言在進行陣列的append的時候，會先把原陣列複製到另外一塊記憶體並且擴充，時間複雜度會是O(n)，但javaScript裡面就只有單純的append，時間複雜度是O(n)。</p>
<h2 id="Implementing-an-array"><a href="#Implementing-an-array" class="headerlink" title="Implementing an array"></a>Implementing an array</h2><p>JavaScript的Array其實是一種Object，所以我們要利用class的方式來自創一個array</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">this</span>.data = &#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">get</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.data[index]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">push</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.data[<span class="built_in">this</span>.length] = item;</span><br><span class="line">		<span class="built_in">this</span>.length++;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> lastItem = <span class="built_in">this</span>.data[<span class="built_in">this</span>.length - <span class="number">1</span>]</span><br><span class="line">		<span class="keyword">delete</span> <span class="built_in">this</span>.data[<span class="built_in">this</span>.length - <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">this</span>.length--;</span><br><span class="line">		<span class="keyword">return</span> lastItem;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="title">delete</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> item = <span class="built_in">this</span>.data[index];</span><br><span class="line">		<span class="built_in">this</span>.shiftItems(index)</span><br><span class="line">		<span class="keyword">return</span> item</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">shiftItem</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> i = index ; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">			<span class="built_in">this</span>.data[i] = <span class="built_in">this</span>.data[i + <span class="number">1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">delete</span> <span class="built_in">this</span>.data[<span class="built_in">this</span>.length - <span class="number">1</span>]</span><br><span class="line">		<span class="built_in">this</span>.length--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArray = <span class="keyword">new</span> MyArray()</span><br></pre></td></tr></table></figure>

<h2 id="Exercise：Reverse-a-string"><a href="#Exercise：Reverse-a-string" class="headerlink" title="Exercise：Reverse a string"></a>Exercise：Reverse a string</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//my answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse1</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> str.split(<span class="string">&quot;&quot;</span>).map(<span class="function">(<span class="params">_ , i</span>) =&gt;</span> str[str.length - i - <span class="number">1</span>]).join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//video answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse2</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//check input</span></span><br><span class="line">	<span class="keyword">if</span>(!str || str.length &lt; <span class="number">2</span> || <span class="keyword">typeof</span> str !== <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> backwards = [];</span><br><span class="line">	<span class="keyword">const</span> totalItems = str.length - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i = totalItems ; i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">		backwards.push(str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> backwards.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//video better answer</span></span><br><span class="line"><span class="keyword">const</span> reverse3 = <span class="function"><span class="params">str</span> =&gt;</span> [...str].reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Exercise：Merge-Sorted-Array"><a href="#Exercise：Merge-Sorted-Array" class="headerlink" title="Exercise：Merge Sorted Array"></a>Exercise：Merge Sorted Array</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//my answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortedArrays1</span>(<span class="params">arr1,arr2</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> ans = [];</span><br><span class="line">	<span class="keyword">let</span> arr1Index = <span class="number">0</span> , arr2Index = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span>(arr1Index &lt; arr1.length || arr2Index &lt; arr2.length)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr1Index &gt;= arr1.length) ans.push(arr2[arr2Index++])</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(arr2Index &gt;= arr2.length) ans.push(arr1[arr1Index++])</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr1[arr1Index] &gt; arr2[arr2Index]) ans.push(arr2[arr2Index++])</span><br><span class="line">				<span class="keyword">else</span> ans.push(arr1[arr1Index++])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//video answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortedArrays2</span>(<span class="params">arr1,arr2</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">const</span> mergedArray = [];</span><br><span class="line">	<span class="keyword">let</span> array1Item = array1[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">let</span> array2Item = array2[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">let</span> i = <span class="number">1</span> , j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Check unput</span></span><br><span class="line">	<span class="keyword">if</span>(arr1.length == <span class="number">0</span>) <span class="keyword">return</span> array2;</span><br><span class="line">	<span class="keyword">if</span>(arr2.length == <span class="number">0</span>) <span class="keyword">return</span> array1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(array1Item || array2Item)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!array2Item || array1Item &lt; array2Item)&#123;</span><br><span class="line">			mergedArray.push(array1Item);</span><br><span class="line">			array1Item = array1[i]</span><br><span class="line">			i++</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			mergedArray.push(array2Item);</span><br><span class="line">			array2Item = array2[j]</span><br><span class="line">			j++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> mergedArray;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="When-can-use-arry"><a href="#When-can-use-arry" class="headerlink" title="When can use arry?"></a>When can use arry?</h2><table>
<thead>
<tr>
<th>優點</th>
<th>缺點</th>
</tr>
</thead>
<tbody><tr>
<td>Fast lookups</td>
<td>slow inderts</td>
</tr>
<tr>
<td>Fast push/pop</td>
<td>slow delete</td>
</tr>
<tr>
<td>ordered</td>
<td>Fixed size(static array)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Master the Coding Interview</category>
      </categories>
      <tags>
        <tag>Data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[Master the Coding Interview]雜湊表</title>
    <url>/blog/2021/12/07/Master_the_Coding-DS-HashTable/</url>
    <content><![CDATA[<p><strong><font color=#FF6600>本篇為Master the Coding Interview教學影片筆記文</font></strong></p>
<p>hash table是一個包含key和value的一張表，每個語言都有不同的資料型態來呈現hash table，javaScript一樣還是Object。當我們要存入一筆資料時，值會經過hash function轉換出一個address給memory儲存，所以當我們要讀取、刪除、插入資料時都是O(1)。</p>
<p>hash function是一種加密的函式，最常見的是MD5，還有其他像SHA-1或SHA-256等等，透過function可以把value轉換成一串string，這串string是idempotent的形式，表示每一次相同的字串都會產生相同的結果，不會因為時間還是其他因素而改變。</p>
<h2 id="Collision"><a href="#Collision" class="headerlink" title="Collision"></a>Collision</h2><p>儘管hash table非常快速，他還是有可能會發生衝突，例如當兩個值被計算出來都要放在同一個位置時，有一種方式是直接將每個adress都變成linked-list，雖然可以儲存資料，但時間複雜度就會變成O(n)，另外一種解決方式是Open addressing，如果放入的位置上已經有value，就會再利用hash function(最簡單就是linear的方式解，如果150不行就151以此類推)找出第二個位置，一直找到可以存放的位置即可，這種方法可以有效的運用hash table。</p>
<h2 id="Implementing-an-Hash-Table"><a href="#Implementing-an-Hash-Table" class="headerlink" title="Implementing an Hash Table"></a>Implementing an Hash Table</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">size</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="built_in">Array</span>(size)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//小小淺規則，如果function前面有underline表示這是一個private function</span></span><br><span class="line">	<span class="function"><span class="title">_hash</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;key.length;i++)&#123;</span><br><span class="line">			hash = (hash + key.charCodeAt(i) * i) % <span class="built_in">this</span>.data.length</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> hash</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="title">set</span>(<span class="params">k , v</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">let</span> address = <span class="built_in">this</span>._hash(k)</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">this</span>.data[address])&#123;</span><br><span class="line">			<span class="built_in">this</span>.data[address] = []</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">this</span>.data[address].push([k,v])</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.data</span><br><span class="line">	&#125; <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">get</span>(<span class="params">k</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">let</span> address = <span class="built_in">this</span>._hash(k)</span><br><span class="line">		<span class="keyword">const</span> currentBucket = <span class="built_in">this</span>.data[address]</span><br><span class="line">		<span class="keyword">if</span>(currentBucket)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; currentBucket.length ; i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(currentBucket[i][<span class="number">0</span>] == <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">					<span class="keyword">return</span> currentBucket[i][<span class="number">1</span>]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">	&#125; <span class="comment">//O(1), somethings use the bad hash function, it&#x27;s O(n)</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">keys</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> keysArray = [];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">this</span>.data.length; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">this</span>.data[i])&#123;</span><br><span class="line">				<span class="built_in">this</span>.data[i].forEach(<span class="function"><span class="params">arr</span> =&gt;</span> keysArray.push(arr[<span class="number">0</span>]))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">return</span> keysArray;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myHashTable = <span class="keyword">new</span> HashTable(<span class="number">50</span>)</span><br><span class="line">myHashTable.set(<span class="string">&#x27;grapes&#x27;</span> , <span class="number">10000</span>);</span><br><span class="line">myHashTable.set(<span class="string">&#x27;apple&#x27;</span> , <span class="number">1000</span>);</span><br><span class="line">myHashTable.set(<span class="string">&#x27;banana&#x27;</span> , <span class="number">100</span>);</span><br><span class="line">myHashTable.get(<span class="string">&#x27;grapes&#x27;</span>);</span><br><span class="line">myHashTable.keys();</span><br></pre></td></tr></table></figure>

<h2 id="Exercise：First-Recurring-Charactor"><a href="#Exercise：First-Recurring-Charactor" class="headerlink" title="Exercise：First Recurring Charactor"></a>Exercise：First Recurring Charactor</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Google Question</span></span><br><span class="line"><span class="comment">//Given an array = [2,5,1,2,3,5,1,2,4] return 2</span></span><br><span class="line"><span class="comment">//Given an array = [2,1,1,2,3,5,1,2,4] return 1</span></span><br><span class="line"><span class="comment">//Given an array = [2,1,3,4] return undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// my answer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstRecurringCharactor</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> hashTable = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; arr.length ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(hashTable[arr[i]]) <span class="keyword">return</span> arr[i]</span><br><span class="line">		hashTable[arr[i]] = <span class="literal">true</span> </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="When-can-use-arry"><a href="#When-can-use-arry" class="headerlink" title="When can use arry?"></a>When can use arry?</h2><table>
<thead>
<tr>
<th>優點</th>
<th>缺點</th>
</tr>
</thead>
<tbody><tr>
<td>Fast lookups</td>
<td>Unordered</td>
</tr>
<tr>
<td>Fast inserts</td>
<td>Slow key iteration</td>
</tr>
<tr>
<td>Flexible Keys</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Master the Coding Interview</category>
      </categories>
      <tags>
        <tag>Data structure</tag>
      </tags>
  </entry>
</search>
